import pytesseract as tess
from PIL import Image
from flask import Flask, request, jsonify
import json
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Set the Tesseract executable path
tess.pytesseract.tesseract_cmd = r'C:\Users\Admin\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'

#For tokenize the text
import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from collections import Counter

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Define a list of technical keywords
technical_keywords =  [
    "agile",
    "algorithm",
    "android",
    "angular",
    "api",
    "app development",
    "artificial intelligence",
    "aws",
    "big data",
    "blockchain",
    "c",
    "c#",
    "c++",
    "computer vision",
    "css",
    "cybersecurity",
    "data analysis",
    "data mining",
    "data science",
    "data visualization",
    "database management",
    "deep learning",
    "devops",
    "docker",
    "dot net",
    "e-commerce",
    "front-end",
    "full-stack",
    "git",
    "html",
    "ios",
    "java",
    "javascript",
    "jquery",
    "json",
    "kotlin",
    "machine learning",
    "mongodb",
    "mysql",
    "natural language processing",
    "networking",
    "node.js",
    "nosql",
    "object-oriented programming",
    "opencv",
    "php",
    "postgresql",
    "python",
    "r",
    "react",
    "redux",
    "restful",
    "ruby",
    "ruby on rails",
    "scala",
    "scripting",
    "scrum",
    "serverless",
    "software development",
    "sql",
    "spring framework",
    "swift",
    "typescript",
    "unity",
    "unix",
    "user experience (ux)",
    "version control",
    "web development",
    "xml",
    "agile methodologies",
    "algorithm design",
    "api integration",
    "application development",
    "artificial neural networks",
    "aws",
    "big data analytics",
    "blockchain technology",
    "c programming",
    "c# programming",
    "c++ programming",
    "computer graphics",
    "computer science",
    "containerization",
    "continuous integration",
    "crypto",
    "data analysis tools",
    "data architecture",
    "data collection",
    "data manipulation",
    "data modeling",
    "data preprocessing",
    "data structures",
    "data warehousing",
    "database design",
    "database systems",
    "deep learning models",
    "design patterns",
    "distributed systems",
    "docker containers",
    "e-commerce platforms",
    "embedded systems",
    "frontend development",
    "full-stack development",
    "game development",
    "git version control",
    "graphql",
    "html/css/js",
    "image processing",
    "information security",
    "internet of things (iot)",
    "java programming",
    "javascript libraries",
    "kubernetes",
    "machine learning algorithms",
    "machine learning models",
    "mobile app development",
    "mobile application",
    "mvc architecture",
    "natural language understanding",
    "network protocols",
    "neural networks",
    "node.js development",
    "object-oriented design",
    "operating systems",
    "oop concepts",
    "open source technologies",
    "programming languages",
    "react.js",
    "real-time systems",
    "restful api design",
    "responsive design",
    "ruby programming",
    "ruby on rails framework",
    "scalable systems",
    "scripting languages",
    "server administration",
    "software architecture",
    "software testing",
    "sql databases",
    "statistical analysis",
    "system administration",
    "system architecture",
    "test-driven development",
    "ui/ux design",
    "user interface design",
    "version control systems",
    "virtual reality (vr)",
    "web application development",
    "web frameworks",
    "web security",
    "web services",
    "web technologies",
    "windows os",
    "wordpress development",
    "agile project management",
    "algorithmic trading",
    "api design",
    "app deployment",
    "application architecture",
    "artificial intelligence (ai)",
    "automated testing",
    "big data technologies",
    "blockchain development",
    "c++ stl",
    "code optimization",
    "coding standards",
    "computer programming",
    "content management systems (cms)",
    "continuous delivery",
    "cryptocurrency",
    "data analysis software",
    "data extraction",
    "data governance",
    "data lakes",
    "data management",
    "data migration",
    "data mining techniques",
    "data pipelines",
    "data science tools",
    "data warehousing systems",
    "database administration",
    "database management systems (dbms)",
    "deep reinforcement learning",
    "design thinking",
    "docker orchestration",
    "embedded programming",
    "enterprise architecture",
    "front-end frameworks",
    "functional programming",
    "game engines",
    "git workflows",
    "gpu programming",
    "human-computer interaction (hci)",
    "information retrieval",
    "information technology (it)",
    "ios development",
    "java development",
    "javascript frameworks",
    "kafka",
    "kotlin programming",
    "linux administration",
    "machine learning frameworks",
    "machine learning libraries",
    "microservices architecture",
    "mobile development",
    "model view controller (mvc)",
    "natural language generation",
    "network architecture",
    "network design",
    "neural network frameworks",
    "node.js libraries",
    "object-oriented analysis and design (ooad)",
    "object-oriented programming (oop)",
    "operating system concepts",
    "operating system security",
    "oop programming",
    "open source development",
    "parallel programming",
    "programming paradigms",
    "project management methodologies",
    "react native",
    "real-time data processing",
    "relational databases",
    "rest api development",
    "robotics",
    "ruby on rails development",
    "sdlc methodologies",
    "secure coding",
    "server management",
    "software architecture patterns",
    "software design principles",
    "software development methodologies",
    "software project management",
    "software quality assurance (qa)",
    "software testing methodologies",
    "software version control",
    "sql programming",
    "statistics and probability",
    "system design",
    "systems analysis",
    "systems programming",
    "technical documentation",
    "test automation",
    "ui/ux principles",
    "user-centered design",
    "virtualization",
    "web application frameworks",
    "web development frameworks",
    "web development tools",
    "windows server",
    "wordpress themes",
    "agile software development",
    "algorithm analysis",
    "api development",
    "app design",
    "application integration",
    "artificial intelligence applications",
    "automated deployment",
    "big data analysis",
    "blockchain technology",
    "c programming language",
    "c++ standard library",
     "agile",
    "algorithms",
    "android",
    "angular",
    "api",
    "app",
    "architecture",
    "artificial",
    "automation",
    "aws",
    "backend",
    "big",
    "blockchain",
    "c",
    "c++",
    "coding",
    "communication",
    "containers",
    "css",
    "cybersecurity",
    "data",
    "database",
    "debugging",
    "deep",
    "design",
    "devops",
    "docker",
    "e-commerce",
    "encryption",
    "frontend",
    "full-stack",
    "git",
    "html",
    "http",
    "javascript",
    "json",
    "kubernetes",
    "linux",
    "machine",
    "microservices",
    "mobile",
    "mongodb",
    "mysql",
    "networking",
    "node.js",
    "open-source",
    "performance",
    "php",
    "postgresql",
    "programming",
    "python",
    "react",
    "redux",
    "rest",
    "ruby",
    "scripting",
    "security",
    "server",
    "software",
    "sql",
    "testing",
    "typescript",
    "ui/ux",
    "version",
    "virtualization",
    "web",
    "wordpress",
    "agile",
    "algorithms",
    "android",
    "angular",
    "api",
    "app",
    "architecture",
    "artificial",
    "automation",
    "aws",
    "backend",
    "big",
    "blockchain",
    "c",
    "c++",
    "coding",
    "communication",
    "containers",
    "css",
    "cybersecurity",
    "data",
    "database",
    "debugging",
    "deep",
    "design",
    "devops",
    "docker",
    "e-commerce",
    "encryption",
    "frontend",
    "full-stack",
    "git",
    "html",
    "http",
    "javascript",
    "json",
    "kubernetes",
    "linux",
    "machine",
    "microservices",
    "mobile",
    "mongodb",
    "mysql",
    "networking",
    "node.js",
    "open-source",
    "performance",
    "php",
    "postgresql",
    "programming",
    "python",
    "react",
    "redux",
    "rest",
    "ruby",
    "scripting",
    "security",
    "server",
    "software",
    "sql",
    "testing",
    "typescript",
    "ui/ux",
    "version",
    "virtualization",
    "web",
    "wordpress",
    "agile",
    "algorithms",
    "android",
    "angular",
    "api",
    "app",
    "architecture",
    "artificial",
    "automation",
    "aws",
    "backend",
    "big",
    "blockchain",
    "c",
    "c++",
    "coding",
    "communication",
    "containers",
    "css",
    "cybersecurity",
    "data",
    "database",
    "debugging",
    "deep",
    "design",
    "devops",
    "docker",
    "e-commerce",
    "encryption",
    "frontend",
    "full-stack",
    "git",
    "html",
    "http",
    "javascript",
    "json",
    "kubernetes",
    "linux",
    "machine",
    "microservices",
    "mobile",
    "mongodb",
    "mysql",
    "networking",
    "node.js",
    "open-source",
    "performance",
    "php",
    "postgresql",
    "programming",
    "python",
    "react",
    "redux",
    "rest",
    "ruby",
    "scripting",
    "security",
    "server",
    "software",
    "sql",
    "testing",
    "typescript",
    "ui/ux",
    "version",
    "virtualization",
    "web",
    "wordpress",
    "agile",
    "algorithms",
    "android",
    "angular",
    "api",
    "app",
    "architecture",
    "artificial",
    "automation",
    "aws",
    "backend",
    "big",
    "blockchain",
    "c",
    "coding",
    "communication",
    "containers",
    "css",
    "cybersecurity",
    "data",
    "database",
    "debugging",
    "deep",
    "design",
    "devops",
    "docker",
    "e-commerce",
    "encryption",
    "frontend",
    "full-stack",
    "git",
    "html",
    "http",
    "javascript",
    "json",
    "kubernetes",
    "linux",
    "machine",
    "microservices",
    "mobile",
    "mongodb",
    "mysql",
    "networking",
    "node.js",
    "open-source",
    "performance",
    "php",
    "postgresql",
    "programming",
    "python",
    "react",
    "redux",
    "rest",
    "ruby",
    "scripting",
    "security",
    "server",
    "software",
    "sql",
    "testing",
    "typescript",
    "ui/ux",
    "version",
    "virtualization",
    "web",
    "wordpress",
    "agile",
    "algorithms",
    "android",
    "oauth2.0",
    "Oauth2.0",
    "oauth",
    "webhooks",
    "oops",
    "nodejs",
    "dsa",
    "ds"
]

#create the route
@app.route('/process_resume', methods=['POST'])
def process_resume():

    #open the image
    # img = Image.open("final.png")
    imag = request.files['image']
    img = Image.open(imag)
    image_text = tess.image_to_string(img)
    print(image_text)
    img = request.files['image']

    # Extract technical keywords from the resume

    # Tokenize words and remove punctuation
    words = word_tokenize(image_text.lower())
    words = [word for word in words if word.isalpha()]

    # Remove stop words
    stop_words = set(stopwords.words("english"))
    words = [word for word in words if word not in stop_words]

    # Count the occurrences of technical keywords
    keyword_counts = Counter(words)

    # Extract technical keywords and their frequencies
    technical_keywords_found = {
        keyword: count
        for keyword, count in keyword_counts.items()
        if keyword in technical_keywords
    }
    # Sort the keywords by frequency (optional)
    keys_list = list(technical_keywords_found.keys())
    print("------------------")
    #json_object = json.dumps(keys_list, sep=",") 
    #print(json_object)
    response = keys_list
    print(response)

    #sorted_keywords = dict(sorted(technical_keywords_found.items(), key=lambda item: item[1], reverse=True))
    return response, 200

if __name__ == '__main__':
    app.run(debug=False,host='0.0.0.0')